name: Sonar, Build and Push Docker Images

on:
  push:
    branches: [ "master", "int", "dev" ]
  pull_request:
    branches: [ "master", "int", "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 🧮 Obtener nombre de rama actual
      - name: 🧮 Determine branch
        id: vars
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "📦 Current branch: $BRANCH_NAME"

      # 🔐 Login a DockerHub
      - name: 🔐 Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      # 🧩 Ejecutar flujo completo para cada servicio (independiente)
      - name: 🚀 Run full pipeline per service
        id: build
        run: |
          SERVICES=(
            auth-service
            config-service
            discovery-service
            gateway-service
            catalog-service
            customer-service
            inventory-service
            notification-service
            rental-service
          )

          mkdir -p reports
          SUCCESS_LIST=""
          FAIL_LIST=""

          for SERVICE in "${SERVICES[@]}"; do
            echo "──────────────────────────────────────────────"
            echo "🔧 Processing service: $SERVICE"
            echo "──────────────────────────────────────────────"
            cd $SERVICE || { echo "❌ ERROR: No se encontró el directorio $SERVICE"; FAIL_LIST+="$SERVICE "; cd ..; continue; }

            # Extraer versión del pom.xml
            VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            echo "📦 Version detected: $VERSION"

            # Análisis SonarQube
            echo "🔍 Running SonarQube analysis for $SERVICE..."
            if ! mvn sonar:sonar \
              -DskipTests=true \
              -Dsonar.projectKey=$SERVICE \
              -Dsonar.projectName=$SERVICE \
              -Dsonar.host.url=$SONAR_HOST_URL \
              -Dsonar.login=$SONAR_TOKEN; then
              echo "⚠️ SonarQube analysis failed for $SERVICE" | tee -a ../reports/$SERVICE.log
              FAIL_LIST+="$SERVICE(Sonar) "
              cd ..
              continue
            fi

            # Quality Gate Check
            echo "🚦 Waiting for Quality Gate result..."
            if ! docker run --rm \
                -v "$(pwd)/target:/usr/src" \
                sonarsource/sonar-scanner-cli \
                sonar-quality-gate \
                -Dsonar.projectKey=$SERVICE \
                -Dsonar.host.url=$SONAR_HOST_URL \
                -Dsonar.login=$SONAR_TOKEN; then
              echo "❌ Quality Gate failed for $SERVICE" | tee -a ../reports/$SERVICE.log
              FAIL_LIST+="$SERVICE(QualityGate) "
              cd ..
              continue
            fi

            # Compilación Maven
            echo "⚙️ Building $SERVICE..."
            if ! mvn clean package -DskipTests; then
              echo "❌ Build failed for $SERVICE" | tee -a ../reports/$SERVICE.log
              FAIL_LIST+="$SERVICE(Build) "
              cd ..
              continue
            fi

            # Construcción y Push Docker
            echo "🐳 Building and pushing Docker image..."
            IMAGE=javierlobo/$SERVICE
            TAG_BRANCH=${{ steps.vars.outputs.branch }}
            docker build -t $IMAGE:$VERSION .
            docker tag $IMAGE:$VERSION $IMAGE:$TAG_BRANCH-$VERSION
            docker tag $IMAGE:$VERSION $IMAGE:latest

            if docker push $IMAGE:$VERSION && \
               docker push $IMAGE:$TAG_BRANCH-$VERSION && \
               docker push $IMAGE:latest; then
              SUCCESS_LIST+="$SERVICE "
              echo "✅ Service $SERVICE built and pushed successfully"
            else
              FAIL_LIST+="$SERVICE(Docker) "
              echo "❌ Docker push failed for $SERVICE" | tee -a ../reports/$SERVICE.log
            fi

            cd ..
          done

          echo ""
          echo "──────────────────────────────────────────────"
          echo "📋 SUMMARY REPORT"
          echo "──────────────────────────────────────────────"
          echo "✅ Successful services: $SUCCESS_LIST"
          echo "❌ Failed services: $FAIL_LIST"

          echo "success=$SUCCESS_LIST" >> $GITHUB_OUTPUT
          echo "fail=$FAIL_LIST" >> $GITHUB_OUTPUT
